services:
  app:
    build:
      context: .
      dockerfile: ${DOCKER_FILE}
      args:
        DATABASE_URL: ${DATABASE_URL}
      network: host
    ports:
      - 8080:${PORT}
    volumes:
      - type: bind
        source: "./sotaapp-db"
        target: "/app/data"

    environment:
      HOST: ${HOST}
      PORT: ${PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_URL: ${DATABASE_URL}
      INIT_DATABASE: ${INIT_DATABASE}
      RUN_MIGRATION: ${RUN_MIGRATION}
      MIGRATION_PATH: ${MIGRATION_PATH}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      AUTH_TOKEN_TTL: ${AUTH_TOKEN_TTL}
      JAEGER_HOST: ${JAEGER_HOST}
      JAEGER_PORT: ${JAEGER_PORT}
      SOTA_ALERT_ENDPOINT: ${SOTA_ALERT_ENDPOINT}
      SOTA_SPOT_ENDPOINT: ${SOTA_SPOT_ENDPOINT}
      SOTA_SUMMITLIST_ENDPOINT: ${SOTA_SUMMITLIST_ENDPOINT}
      SUMMITLIST_SCHEDULE: ${SUMMITLIST_SCHEDULE}
      POTA_ALERT_ENDPOINT: ${POTA_ALERT_ENDPOINT}
      POTA_SPOT_ENDPOINT: ${POTA_SPOT_ENDPOINT}
      GEOMAG_ENDPOINT: ${GEOMAG_ENDPOINT}
      GEOMAG_SCHEDULE: ${GEOMAG_SCHEDULE}
      MAPCODE_ENDPOINT: ${MAPCODE_ENDPOINT}
      ALERT_INTERVAL: ${ALERT_INTERVAL}
      SPOT_INTERVAL: ${SPOT_INTERVAL}
      ALERT_EXPIRE: ${ALERT_EXPIRE}
      SPOT_EXPIRE: ${SPOT_EXPIRE}
      APRS_LOG_EXPIRE: ${APRS_LOG_EXPIRE}
      POTA_LOG_EXPIRE: ${POTA_LOG_EXPIRE}
      APRSUSER: ${APRSUSER}
      APRSPASSWORD: ${APRSPASSWORD}
      APRSHOST: ${APRSHOST}
    #depends_on:
    #  - redis
    #  - postgres

    #redis:
    #  image: redis:alpine
    #  ports:
    #    - ${REDIS_PORT_OUTER}:${REDIS_PORT_INNER}

    #postgres:
    #  image: postgis/postgis:15-3.5-alpine
    #  command: postgres -c log_destination=stderr -c log_statement=all -c log_connections=on -c log_disconnections=on
    #  ports:
    #    - ${DATABASE_PORT_OUTER}:${DATABASE_PORT_INNER}
    #  volumes:
    #   - db:/var/lib/postgres/data
    #  environment:
    #    POSTGRES_USER: ${DATABASE_USERNAME}
    #   POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    #    POSTGRES_DB: ${DATABASE_NAME}
    #  healthcheck:
    #    test: [ "CMD", "pg_isready", "-U", "${DATABASE_USERNAME}" ]
    #    interval: 1m30s
    #   timeout: 30s
    #    retries: 5
    #    start_period: 30s

volumes:
  db:
    driver: local
